language: python


python:
    - 2.7
    - 3.5

# Setting sudo to false opts in to Travis-CI container-based builds.
sudo: false


# The apt packages below are needed for sphinx builds, which can no longer
# be installed with sudo apt-get.
addons:
    apt:
        packages:
            - graphviz
            - texlive-latex-extra
            - dvipng


env:
    global:
        # SET DEFAULTS TO AVOID REPEATING IN MOST CASES
        - NUMPY_VERSION=stable
        - ASTROPY_VERSION=stable
        - CONDA_DEPENDENCIES='Cython matplotlib scipy ipython'
        - PIP_DEPENDENCIES='photutils'
        - MAIN_CMD='python setup.py'
        - SETUP_CMD='test'
        - CONDA_CHANNELS='astropy-ci-extras astropy'

    matrix:
        # make sure that egg_info works without dependencies
        - SETUP_CMD='egg_info'
        # Try all python versions with the latest numpy
        - SETUP_CMD='test -v'


matrix:

    # Don't wait for allowed failures
    fast_finish: true

    include:

        # Check for sphinx doc build warnings - we do this first because
        # it may run for a long time
        - python: 2.7
          env: SETUP_CMD='build_sphinx -w' CONDA_DEPENDENCIES='Cython ipython scipy matplotlib ginga'
        - python: 3.5
          env: SETUP_CMD='build_sphinx -w' CONDA_DEPENDENCIES='Cython ipython scipy matplotlib ginga'


       # Try Astropy development and LTS versions
        - python: 2.7
          env: ASTROPY_VERSION=development
        - python: 2.7
          env: ASTROPY_VERSION=lts
        - python: 3.5
          env: ASTROPY_VERSION=lts
        - python: 3.5
          env: ASTROPY_VERSION=development

        # Try with optional dependencies disabled
        - python: 2.7
          env: PIP_DEPENDENCIES=''
        - python: 3.5
          env: PIP_DEPENDENCIES=''


        # Try older numpy versions
        - python: 2.7
          env: NUMPY_VERSION=1.10
        - python: 2.7
          env: NUMPY_VERSION=1.9
        - python: 3.5
          env: NUMPY_VERSION=1.10
        - python: 3.5
          env: NUMPY_VERSION=1.9
        - python: 3.5
          env: NUMPY_VERSION=1.11


        # Try numpy pre-release
        - python: 3.5
          env: NUMPY_VERSION=prerelease

        # Do a coverage test in Python 2. This requires the latest
        # development version of Astropy, which fixes some issues with
        # coverage testing in affiliated packages.
        - python: 2.7
          env: SETUP_CMD='test --coverage' ASTROPY_VERSION=development


        # Do a pep8 test
        - python: 3.5
          env: SETUP_CMD='test --pep8 -k pep8

    allow_failures:
        # The build with numpy pre-release halts in the middle without
        # showing any obvious reason, thus allowing it to fail for now.
        - python: 3.5
          env: NUMPY_VERSION=prerelease


before_install:

    # CONFIGURE A HEADLESS DISPLAY TO TEST PLOT GENERATION
    - export DISPLAY=:99.0
    - sh -e /etc/init.d/xvfb start
    - sleep 3
    - uname -a
    - python --version

    # We now use the ci-helpers package to set up our testing environment.
    # This is done by using Miniconda and then using conda and pip to install
    # dependencies. Which dependencies are installed using conda and pip is
    # determined by the CONDA_DEPDENDENCIES and PIP_DEPENDENCIES variables,
    # which should be space-delimited lists of package names. See the README
    # in https://github.com/astropy/ci-helpers for information about the full
    # list of environment variables that can be used to customize your
    # environment. In some cases, ci-helpers may not offer enough flexibility
    # in how to install a package, in which case you can have additional
    # commands in the install: section below.


install:
    - git clone git://github.com/astropy/ci-helpers.git
    - source ci-helpers/travis/setup_conda_$TRAVIS_OS_NAME.sh
    - pip install pytest-pep8

    # As described above, using ci-helpers, you should be able to set up an
    # environment with dependencies installed using conda and pip, but in some
    # cases this may not provide enough flexibility in how to install a
    # specific dependency (and it will not be able to install non-Python
    # dependencies). Therefore, you can also include commands below (as
    # well as at the start of the install section or in the before_install
    # section if they are needed before setting up conda) to install any
    # other dependencies.


script:
    - $MAIN_CMD  $SETUP_CMD


after_success:
    - if [[ $SETUP_CMD == 'test --coverage' ]]; then coveralls --rcfile='imexam/tests/coveragerc'; fi
